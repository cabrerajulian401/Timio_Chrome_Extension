!function(){const t=new class{constructor(){this.animations=new Map,this.lottieLoaded=!1,this.initializationPromise=null}async initialize(){if(!this.lottieLoaded)return this.initializationPromise||(this.initializationPromise=new Promise((async(t,i)=>{try{const i=chrome.runtime.getURL("lottie.min.js"),n=await fetch(i),e=await n.text(),o=`lottie-script-${Date.now()}`,a=document.getElementById(o);a&&a.remove();const r=document.createElement("script");r.id=o,r.textContent=`\n                        try {\n                            var module = {};\n                            ${e}\n                            window.lottie = module.exports || module;\n                            window.lottieInitialized = true;\n                            document.dispatchEvent(new Event('lottieReady'));\n                        } catch (error) {\n                            console.error('Lottie initialization error:', error);\n                        }\n                    `;const s=new Promise((t=>{document.addEventListener("lottieReady",t,{once:!0})}));if(document.head.appendChild(r),await Promise.race([s,new Promise(((t,i)=>setTimeout((()=>i(new Error("Script load timeout"))),3e3)))]),!window.lottie)throw new Error("Lottie object not found after initialization");this.lottieLoaded=!0,t()}catch(t){console.error("Failed to initialize Lottie:",t),this.lottieLoaded=!1,this.initializationPromise=null,i(t)}}))),this.initializationPromise}async loadAnimationData(t){try{const i=await fetch(chrome.runtime.getURL(`${t}.json`));if(!i.ok)throw new Error(`Failed to load ${t} animation data`);return await i.json()}catch(i){throw console.error(`Failed to load ${t} animation:`,i),i}}async createAnimation(t,i){let n=null,e=3;for(;e>0;)try{if(await this.initialize(),n=document.getElementById(t),!n)throw new Error(`Container ${t} not found`);Object.assign(n.style,{width:"100px",height:"100px",margin:"0 auto"});const e=await this.loadAnimationData(i),o=window.lottie.loadAnimation({container:n,renderer:"svg",loop:!0,autoplay:!0,animationData:e});return this.animations.set(t,o),o.addEventListener("DOMLoaded",(()=>{console.log(`Animation ${i} DOM loaded`)})),o.addEventListener("data_ready",(()=>{console.log(`Animation ${i} data ready`)})),o.addEventListener("error",(t=>{console.error(`Animation ${i} error:`,t),this.showFallbackSpinner(n)})),o}catch(t){if(console.error(`Animation creation attempt ${4-e} failed:`,t),e--,0===e)throw console.error("Failed to create animation after all retries"),n&&this.showFallbackSpinner(n),t;await new Promise((t=>setTimeout(t,1e3))),this.lottieLoaded=!1,this.initializationPromise=null}}showFallbackSpinner(t){t&&(t.innerHTML='\n                <div class="timio-spinner-fallback"></div>\n            ')}destroyAnimation(t){const i=this.animations.get(t);i&&(i.destroy(),this.animations.delete(t))}destroyAllAnimations(){this.animations.forEach((t=>t.destroy())),this.animations.clear()}};window.setupAnimation=async function(i,n){console.log(`Setting up ${n} animation in ${i}`);try{return await t.createAnimation(i,n)}catch(t){throw console.error("Animation setup failed:",t),t}},window.cleanupAnimations=function(){t.destroyAllAnimations()}}();